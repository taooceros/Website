@page "/blog"
@using Website.Models
@using Markdig
@using Website.Utility
@using System.Security.Cryptography
@inject HttpClient Http
@inject IJSRuntime JsRuntime
@inject MarkdownPipeline MarkdownPipeline
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<PageTitle>Blog</PageTitle>

<MudStack Row="true">
    <MudTextField @bind-Value="EncryptionKey"
        Label="Key"
        FullWidth="true"
        InputType="InputType.Password"/>
    <MudButton OnClick="SaveEncryptionKey">Save</MudButton>
</MudStack>
@foreach (var post in Posts)
{
    <MudPaper Elevation="3"
        Style="margin: 10px; padding: 15px;">
        @{
            string content;
            try
            {
                content = string.IsNullOrWhiteSpace(EncryptionKey) ? post.Content :
                    AesHelper.DecryptStringFromBytes_Aes(post.Content, EncryptionKey);
            }
            catch (ArgumentException)
            {
                content = post.Content;
            }
            var text = Markdown.ToPlainText(content);
            var maxLength = (int)Math.Floor(Dimension.Width * 0.4);
            var summary = text.Length > maxLength ? string.Concat(text.AsSpan()[..maxLength], "...") : text;

            void OnClick()
            {
                post.DisplayFull = !post.DisplayFull;
            }
        }
        @if (post.DisplayFull)
        {
            @((MarkupString)Markdown.ToHtml(content, MarkdownPipeline))
        }
        else
        {
            <MudText>
                @summary
                ...
            </MudText>
        }
        <MudButton OnClick="@OnClick">Expand</MudButton>
    </MudPaper>

}

@code {
    List<Post> Posts { get; } = new();
    private WindowDimension Dimension { get; set; } = null!;


    protected override async Task OnInitializedAsync()
    {
        if (await LocalStorage.ContainKeyAsync("EncryptionKey"))
        {
            EncryptionKey = await LocalStorage.GetItemAsync<string>("EncryptionKey");
        }


        Dimension = await JsRuntime.InvokeAsync<WindowDimension>("getWindowDimensions");

        var links = await Http.GetFromJsonAsync<List<MarkdownLink>>("Blogs/outline.json") ?? new List<MarkdownLink>();

        foreach (var (fileName, filePath) in links)
        {
            Posts.Add(new Post(fileName, filePath, await Http.GetStringAsync($"{filePath}")));
        }

        Posts.Sort((x, y) => -string.Compare(x.FilePath, y.FilePath, StringComparison.Ordinal));

        await base.OnInitializedAsync();

    }
    private string EncryptionKey { get; set; } = "";
    
    public async Task SaveEncryptionKey()
    {
        await LocalStorage.SetItemAsync("EncryptionKey", EncryptionKey);
    }
}