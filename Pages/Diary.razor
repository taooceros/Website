@page "/Diary"
@using Website.Models
@using Markdig
@using Website.Utility
@inject HttpClient Http
@inject IJSRuntime JsRuntime
@inject MarkdownPipeline MarkdownPipeline
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject IDiarieservice Diarieservice


<link href="css/github-markdown.css" rel="stylesheet" />

<PageTitle>Diary</PageTitle>

<MudStack Row="true">
    <MudTextField FullWidth="true" InputType="InputType.Password" Label="Key" T="string" Text="@EncryptionKey"
        TextChanged="KeyChanged" />
    <MudButton OnClick="SaveEncryptionKey">Save</MudButton>
</MudStack>

@if (_numberOfPages > 0)
{
    @foreach (var post in DisplayContent[_page - 1])
    {
        <MudPaper Elevation="3" Style="margin: 10px; padding: 15px;">
            @{
                var content = string.IsNullOrEmpty(post.DecryptedContent) ? post.Content : post.DecryptedContent;
                var text = Markdown.ToPlainText(content);
                var maxLength = (int)Math.Floor(Dimension.Width * 0.4);
                var summary = text.Length > maxLength ? string.Concat(text.AsSpan()[..maxLength], "...") : text;

                void OnClick()
                {
                    post.DisplayFull = !post.DisplayFull;
                }
            }
            @if (post.DisplayFull)
            {
                <div class="markdown-body">
                    @((MarkupString)Markdown.ToHtml(content, MarkdownPipeline))
                </div>
            }
            else
            {
                <MudText Style="word-wrap: break-word">
                    @summary
                    ...
                </MudText>
            }
            <MudButton OnClick="@OnClick">Expand</MudButton>
        </MudPaper>
    }

    <div class="d-flex justify-center">
        <MudPagination Count="_numberOfPages" SelectedChanged="OnPageSelectionChanged" />
    </div>

}

@code {
    List<DiaryLink> Links { get; set; } = new();
    private WindowDimension Dimension { get; set; } = null!;

    private List<DiaryPost>[] DisplayContent { get; set; } = { new() };

    private bool[] PageInitialized { get; set; } = Array.Empty<bool>();

    const int MaxPostPerPage = 4;

    int _numberOfPages;
    int _page = 1;

    private string EncryptionKey { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        if (await LocalStorage.ContainKeyAsync("EncryptionKey"))
        {
            EncryptionKey = await LocalStorage.GetItemAsync<string>("EncryptionKey");
        }

        Dimension = await JsRuntime.InvokeAsync<WindowDimension>("getWindowDimensions");

        Links = await Diarieservice.GetDiaryLinksAsync();

        _numberOfPages = (int)Math.Ceiling((double)Links.Count / MaxPostPerPage);

        DisplayContent = new List<DiaryPost>[_numberOfPages];
        PageInitialized = new bool[_numberOfPages];

        Links.Sort((x, y) => -string.Compare(x.FilePath, y.FilePath, StringComparison.Ordinal));

        for (var i = 0; i < DisplayContent.Length; i++)
        {
            DisplayContent[i] = new List<DiaryPost>();
        }

        PageInitialized[0] = true;


        DisplayContent[0] = (await Diarieservice.LoadDiaryAsync(Links.Take(MaxPostPerPage))).OrderByDescending(x => x.FilePath).ToList();

        await UpdateDecryptedText();

        await base.OnInitializedAsync();

    }

    public async Task SaveEncryptionKey()
    {
        await LocalStorage.SetItemAsync("EncryptionKey", EncryptionKey);
    }
    private async Task OnPageSelectionChanged(int page)
    {
        var i = page - 1;
        if (PageInitialized[i])
        {
            _page = page;
            return;
        }
        PageInitialized[i] = true;

        DisplayContent[i] = (await Diarieservice.LoadDiaryAsync(Links.Skip(i * MaxPostPerPage).Take(MaxPostPerPage))).OrderByDescending(x => x.FilePath).ToList();

        _page = page;

        await UpdateDecryptedText();

    }

    private async Task KeyChanged(string arg)
    {
        EncryptionKey = arg;
        await UpdateDecryptedText();
    }

    private async Task UpdateDecryptedText()
    {
        foreach (var post in DisplayContent[_page - 1])
        {
            try
            {
                post.DecryptedContent = await AesHelper.SubtleCryptoDecryptAsync(JsRuntime, EncryptionKey, post.Content);
            }
            catch
            {
                post.DecryptedContent = "";
            }
        }
    }
}
