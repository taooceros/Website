@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<MudThemeProvider @ref="@ThemeSpecification.Provider" @bind-IsDarkMode="@ThemeSpecification.DarkMode"/>
<MudDialogProvider/>
<MudSnackbarProvider/>
<div>
    <MudLayout>
        <MudAppBar Color="Color.Transparent"
                   Elevation="0"
                   Class="app-bar-shadow"
                   Style="backdrop-filter: blur(5px);mask: linear-gradient(to top, transparent, black 35%);">
            <MudIconButton Color="Color.Inherit" Edge="Edge.Start" OnClick="@DrawerToggle"
                           Icon="@Icons.Material.Filled.Menu" Class="ml-1"/>
            <MudSpacer/>


            @if (NavigationManager.ToBaseRelativePath(NavigationManager.Uri).Split("#")[0] == "")
            {
                <MudBreadcrumbs Items="_items"/>
            }


            <MudSpacer/>

            <MudToggleIconButton @bind-Toggled="@ThemeSpecification.DarkMode"
                                 Color="Color.Inherit" Icon="@Icons.Material.Filled.LightMode" ToggledColor="Color.Inherit"
                                 ToggledIcon="@Icons.Material.Filled.DarkMode"/>
            <MudIconButton Color="Color.Inherit" Icon="@Icons.Custom.Brands.GitHub" Href="https://github.com/taooceros/"
                           Target="_blank"/>
        </MudAppBar>
        <MudDrawer @bind-Open="_drawerOpen" Elevation="0" ClipMode="DrawerClipMode.Docked" Breakpoint="Breakpoint.Md"
                   Width="200px" Color="Color.Transparent">
            <NavMenu/>
        </MudDrawer>
        <MudMainContent>
            <MudContainer Class="my-16 pa-8" MaxWidth="MaxWidth.Large">
                @Body
            </MudContainer>
        </MudMainContent>
    </MudLayout>

</div>


@code
{
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ThemeSpecification.DetectSystemTheme();
            await JSRuntime.InvokeVoidAsync("toggleTheme", ThemeSpecification.DarkMode);
            StateHasChanged();
        }
    }


    private readonly List<BreadcrumbItem> _items =
    [
        new BreadcrumbItem("Home", href: "#top"),
        new BreadcrumbItem("Research", href: "#research_interest"),
        new BreadcrumbItem("Projects", href: "#projects"),
        new BreadcrumbItem("Awards", href: "#awards"),
    ];

    bool _drawerOpen = false;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
}