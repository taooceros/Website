@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime

<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar Color="Color.Transparent"
        Elevation="0">
        <MudIconButton Color="Color.Inherit"
            Edge="Edge.Start"
            Icon="@Icons.Material.Filled.Menu"
            OnClick="@((e) => DrawerToggle())"/>
        <MudSpacer/>
        <MudToggleIconButton ToggledChanged="OnThemeToggled "
            Color="Color.Inherit"
            Icon="@Icons.Filled.LightMode"
            ToggledColor="Color.Inherit"
            ToggledIcon="@Icons.Filled.DarkMode"/>
        <MudIconButton Color="Color.Inherit"
            Icon="@Icons.Custom.Brands.GitHub"
            Link="https://github.com/taooceros/"
            Target="_blank"/>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen"
        Color="Color.Secondary"
        Elevation="1">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">Website</MudText>
        </MudDrawerHeader>
        <NavMenu/>
    </MudDrawer>
    <MudMainContent>
        <MudContainer Class="my-16 pt-16"
            MaxWidth="MaxWidth.Large">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

<MudThemeProvider @bind-IsDarkMode="@ThemeSpecification.DarkMode"
    @ref="@ThemeSpecification.Provider"
    Theme="ThemeSpecification.Theme"/>


@code
{
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ThemeSpecification.DetectSystemTheme();
            await JSRuntime.InvokeVoidAsync("toggleTheme", ThemeSpecification.DarkMode);
            StateHasChanged();
        }
    }

    bool _drawerOpen = false;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    private void OnThemeToggled (bool toggled)
    {
        ThemeSpecification.DarkMode = toggled;
        JSRuntime.InvokeVoidAsync("toggleTheme", toggled);
    }
}